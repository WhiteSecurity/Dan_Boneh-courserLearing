Confidentiality : semantic security against a CPA attack
  Encryption secure against eavesdropping only
  
Integrity:
  Existential unforgeability under chosedn message attack
  CBC-mac ,Hmac, Pmac , CW-MAC
  
  This module: encryotion secure against tampering 
    Ensuring both confidentiality integrity
联合保密性和数据完整性来对数据进行保护

攻击者能够进入网络 traffic 实施 tampering attacks
   TCP/IP
   使用一个高度抽象的TCP/IP协议来介绍攻击对数据的攻击
   
                                    
                                                                   |——————————   port 80 /www
   user  ---》 dest=xx||data and encrypt by k server（TCP/IP stack）|
                                                                   |——————————   port 25/bob
         IV，E(dest=xx||data)                                         
   1. 有客户端和 服务器端，user端向server发送服务信息,如果bob是攻击者·，并且能够截断从客户端到服务器端的加密数据的话，
    bob只要改变发送的地址，就能让服务器来解密数据并且发送给bob，如果是用CBC来进行流密码加密的话，bob就能够对 之前的IV进行修改
    IV‘=IV xor (...80...) xor (..25..)
    
   2.只需要攻击者利用 network traffic,不需要对解密服务器进行解密
   远程终端app
         remote terminal app: each keystroke encrypted with CTR mode(counte )
                
                IP her||TCP hdr || T(16 bit TCP checksum) || D (1 byte key stroke)
            ------------------------------------------------------------------------>
        K                                                                                  server
                for all t,s send: IP her||TCP hdr || T xor t || D xor s                                                                       
            ------------------------------------------------------------------------>
            <------------------------------------------------------------------------
                 ACK if valid checksum, nothing otherwise
            
            如果checksum是错的，那么服务器就会忽视并且抛弃，checksum（tcp header，D）=t xor checksum(hdr,D xor s)=>
            can find D
            使用choose cipher attack ，来不断的得到相应的明文，try all t and s
            
            
            
         The lesson:
          CPA security cannot guarantee secrecy under active attack
          
          only use one of two modes:
           If message need integrity but no confidentiality
           use a mac
           if message needs both integrity and confidentiality:
             use authenticated encryption modes
            
 =====================================================================
 defination:
      as usual:  E: k x m x N(nonce) --> C
                 D: k x C x N(nonce) --> M x {T} 这个T是一个独立的部分能够告诉解密者，有没有必要进行解密还是直接忽略
            
            
         Security: the system must provide
           sem.security under cpa attack, and  ciphertext integrity
           
           attackers can't not creat new ciphertext that decrypt properly
           
        ciphertext integrity
                     m1属于M,      m2,m3,....m_q
                   <-------------------------------------
        challenger   C_1,......C_q                        Adversary
                   ------------------------------------->
                       c
                  <--------------------------------------
            
        如果adversay创造了一个合法的C，那么，攻击者就能够获胜
        
        所以我们定义对于有效攻击者A 密文完整性是对有有效的攻击者A，能够有概率对于挑战者能够输出1
        的概率是可忽略的
           ADV_c[A,E]=Pr[Chal output=1] is negligible
           
           Implication: authenticity
           Attacker cannot  fool Bob into thinking a message was sent from Alice
                     m0,m1,......m_q
                 <------------------------------                   C
           Alice                                attacker -------------------------->Bob
                 ------------------------------>        Cannot creat valid c 不属于{c_1,C_2,....c_q}
                     c_i=E(k,m_i)
           
           attack want to creat new c don't belong to alice to bob
         
         -------------------------------------------------------------------------------------------  
           choose ciphertext attack
            the power of adversary:both cpa and cca
              can obtain the encryption of arbitrary messages of his choise（但不是所有的密文）攻击者欺骗服务器能够解密攻击者想要解密c
              can decrypt any ciphertext of his choice, other than challenge
                模拟现实生活中攻击者的能力
                
                供给者的目的： break sematic security
                
        chosen ciphertext security :defination
           
                       chal.    |  for i=1,2,..q                    |
                                | (1)cpa query:                     |
                       k<-----K |     m0,m1                         |
           challenger           |   <---------                      |            adversary
                                |     ---------->                   |         
                                |          ci                       |
                                | -------------------------         |
                                |  (2) cca query                    |
                                |  攻击者从密闻中选择他想要解密的密文之后chall返回解密的密文发送给adv|
                                |                                   |
                                |                                   |
               
           
           
           
           所以我们定义CCA security是一个‘efficient’A,ADV[A,E]=|Pr[EXP(0)=1]-Pr[EXP(1)=1]| is negligible
           
           EXample:CBC with random IV is not CCA-security
        
                           m0,m1
     challenger            <------                     adversary
                          ( V||ci)
                           ------> 
                           
                      ( V xor 1 ||ci)
                          <------   
                       ( m_b xor 1)
                         ------->
     攻击者就能够轻易攻破 CBC with ran IV
     
     THm:let (E,D) be a cipher that provides AE(Authenticated encryption)
        then(E<D) is cca secure!
        
        in particular,for any 1-query eff.A exist eff.B1,B2,s,t
           Adv_CCA[A,E]<= 2q*Adv_Ci[B_i,E]+Adv_CPA[B_2,E]
                       cipher text integrity  and cpa security==> choose cipher attck secure
           
           
           因为AE具有 cipher integrity,所以攻击者不能够选择任意的cipher让chall来解密，所以只要是约等于就是CPA安全
           又因为AE具有CPA安全，所以AE是CCA安全的。
           
           Authenticated encryption:
              ensure confidentiality against an cative adversary that can decrypt some ciphertexts
              
              Limitations:
                 does not prevent replay attacks 
                 does not account for side channels(timing)
           
 -------------------------------------------------------------------------------------------------------------
 MACs机制仅仅是为了数据的完整性，而不能保证数据的保密性
 Constructions from ciphers and MACs
           
    Auhenticated Encryption(AE): introduce in 2000      
           
           Let(E,D) be CPA secure cipher and (S,V) secure MAC,
              Then 
               1.Encrypt-then-MAC: always provides A.E.
               2.MAC-then-encrypt: may be insecre against CCA attacks
          however:when (E,D) is rand-CTR mode or rand-CBC M-then
           however: 当加密和解密算法 是ran-CTR mode 或者是 rand-CBC ,MAC之后在加密提供了 A.E. 安全
           
           但是对于 rand-CTR-mode,one time MAC is sufficient
           
       Standards:
           GCM: CTR mode encryption then CW-MAC
               (accelerated via Intel's PCLMULQDQ instruction)
           CCM: CBC-MAC then CTR mode encryption
           EAX: CTR mode encryption then CMAC
           
 TLS: 在TLS 协议中，用户和服务器之前传递信息，有  
                     
                     HDR--TLS record（数据最多是16kb，会分块进行加密传输）            
   user              ------------------------->                           sever
     K_b->s,K_s->b                             K_b->s,K_s->b  
     
         Unidirectional keys: K_b->s,K_s->b  
         首先通过密钥交换协议，用户端和服务器端之间会产生一对单向的密钥对，一个是服务器端进行加解密的，一个是客户端进行加解密的
         。单向的Key具有两个不同的key，一个加密key，一个产生MAC的key，所以一共有四个key
         
         在客户端进行加密
         在服务器端进行解密
         
         Stateful encryption:
            Each side maintains two 64-bit countersL: ctr_b->s,ctr_s_>b
            Init. to 0 when session started.  ctr++ for every record.
            purpose: replay defense(如果攻击者复制密文进行重放，那么攻击将会无效)
            
    HDR(type of the packet ||version number for the protocol|| the length of the packet)|| data ||tag||pad）
    加密使用AES CBC，MAC使用
   1.首先使用MAC产生一个tag，tag<-S(k_mac,[++ctr_b->s||header||data])
         mac then encrypt 
   2.pad[header||pad||tag] to AES block tag
   3.CBC encrypt with k_enc and new random IV
   4.prepend header [++ctr_b->s|| header|| data]
    send bad_record_mac if in valid 
  
   
   服务器进行解密：
     server side:  dec(k_b->s, record, ctr_b->s)
       step 1: CBC decrypt record using k_enc
       step 2:check pad format: send bad_record_mac if invalid 
       step 3:check tag on[++ctr_b->s||header||data]
       
       Provide authentication encryption :
       (provide no other information is leaked during decrypotion)
  
    加密使用AES CBC，MAC使用
    
    面对TLS1.1,我们有两个不同的攻击方式，
      IV for CBC can be predicted,
      orcal padding：
        判断pad的错误和正确通过 timing 计时器
        
        attack has the ciphertext c[0],c[1],c[2] and it wants m[1]
        
         c0   c1
         |    |      攻击者猜测一个g是他的合法的byte，异或上一个 0x01，
         |__| |     
        D() |D()
 IV--xor-|  _ |      最后现实的真正的 byte xor  g xor 0x01,如果显示是0x01那么，g就被猜测正确，so and so forth
        m0    m1      到最后一个byte为止，g要被使用2^16,
        
        
LEsson:
           encrypt than mac  would completely avoid the problem :
           MAc is check first and ciphertext is discard id invalid 
         
         MAc-then-CBC encrypt provides A,E,but padding orcle is destorying it,
         
         
         Attacking non-atomic decryption:
            SSH
       HDR(type of the packet ||version number for the protocol|| the length of the packet)|| data ||tag||pad
       the length of the packet，攻击者通过不断的querry 从而获得正确的 the length of the packet，导致不正确
       way: 不把他和packet of length 放在加密中，而仅仅是公开的方法 MAC环节中。
    
   
  唯密文攻击：只知道密文，也就是，那只能通过统计特性分析其中有什么规律了已知明文攻击：得到了一些给定的明文和对应的密文，在这里可以是的任意非空子集。
  选择明文攻击：除了上面的基础，攻击者还可以任意创造一条明文比如“Excited”，并得到其加密后的密文。比如用一定的手段渗透Sharon的系统，但是不能直接攻破秘钥，于是只能以她的身份发“Excited”，然后用抓包或者别的方法得到她发送出来的加密的消息。
  选择密文攻击：除了已知明文攻击的基础，攻击者还可以任意制造或者选择一些密文，并得到其解密后的明文。比如用一定的手段在通信过程中伪造消息替换真实消息，然后窃取Sharon获得并解密的结果，有可能正好发现随手伪造的密文解密结果是有意义的，比如naive。
  选择文本攻击：可以制造任意明文/密文并得到对应的密文/明文，就是上面两者的结合。

   
     
 Key Derivation
                                  
     How to deriving mangy keys from one
         Typocal scenario. a single source key is samoled from:
            Hardware random number generator
            a key exchange protocol (discussed later)
            
     need many keys to secure session :
        unidirectional keys; multiple keys for nonce-based CBC
          
            Goal: generate many keys from this one source key

1.F: a PRF with key space K and outputs in{0,1}^n
  Suppose source key SK is uniform in K
  * Define Key Derivation Function(KDF) as:
     KDF(SK, CTX, L);=
            F(sk,(CTX||0))|| F(sk,(CTX||1))||......|| F(sk,(CTX||L))
   CTX : a string that uniquely identifeis the application
   
   What if source key is not unifrom?
      Recall: RPFs are pseudo random only when key is uniform in K
      
      Source key often not uniformly random:
        
         *Key exchange protocol : key uniform in some subset of K
         * Hardware RNG: may produce biased output
   
  implements the extract-then-expand paradigm:
      extract : use k<------HMAC(salt,SK)
      
      Then expand using HMAC as a PRF with key k
      
   
   2.怎么在加密的数据库中来寻找自己的所需要的信息
   
   
   
   
   




     
     
     
     
     
            
            
