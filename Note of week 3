Message integrity

goal: integrity  ,no condidentiality

  Examples: 
     -Protecting  public binaries on disk 保护公共文件的完整性
     -Protecting banner ads on web pages 保护在广告页面上的标语
     
   The basic mechanism is called MAC
    a message authentication code,  MAC
    
    当通信双方进行通信的时候，通过在message后面添加一个tag标签的方法来是接受放能够认证信息的数据完整性
    
    MAC包含两个算法，一个是产生一个标签，第二个是验证标签的正确性和信息的完整性,并且输出yes or no
    DEF： MAC i=(S,V) defined over (K,M,T)is a paie of algs:
      -S(k,m) outputs t is in T
      -V(k, m, t=S(k,m))  ,outputs yes or no
  
  
    如果采用一个没有secret key 的方法，比如CRC: cyclic redundancy check 循环冗余查询，产生一个tag的
  方法来完整性的验证，攻击者可以轻易的blcok the message and tag,并且修改原数据and 重新生成特定的tag
  如果我们引入一个密钥的话，attack就做不到一些alice能够做的事情了。
  
   怎么定义一个安全的MACs
     Attackers's power :chosen message attack 
       for m1.m2.....mq attack is given ti  <- S(k,mi)
       换句话说就是攻击者能够选择特定的明文给ALICE，而ALICE能够对特定的明文产生特定的标签tag，
       
     Attack's goal:existential forgery
      * produce some new valid message/tag pair(m,t).
            (m,t) 不属于 {(m1,t1),...,(mq,tq)}
     攻击者有能力选择特定的message进行攻击，攻击者的目标是能够产生 一对合法的新的 m 和tag t
     
     我们定义安全的MAC
        1.是想要攻击者不能够为一个新的message产生合法的tag
        2.我们不能够为一个相同的message找到另一个tag
        
                     m1,m2,m3......,mq
                    <--------------------
        challenger    t1,t2,t3......,tq         Adv
                    --------------------->
                             (m,t)
                  <---------------------------
     
     b=1 if V(k,m,t)='yes'  and (m1,t1),....(mq,tq)
     b=0 otherwise
     
     我们定义 攻击者能够攻破的概率是可忽略的
        Adv_mac[A,l]= Pr[Chal.outputs 1]= negligible     
     
     
     在现实生活中，1.tag所产生的lenfth需要足够的长，64 ，96，126，
                 2.不存在两个不同的message在相同的密钥下产生相同的tag
     
     
     Example: protecting system files
      suppose at install time the sustem computes:
       
       F1         F2          F3 ........
      (F1,t1)    (F2,t2)    (F3,t3)
        电脑会把所有的文件和文件所关联的tag保存起来，当攻击者无法攻破一个安全的MACs的时候，攻击者不能够恶意的创建文件在操作系统中
        但是会有可能对文件地址进行交换，来造成某种程度的破坏（所有的对文件的改变都会被一个安全的MAC所检测到）
        
   
-------------------------------------------------------------------------------------------
review： MAC有一个生成算法                 和           一个验证算法
      signing alg. S(k,m)--->t  and        V(k,m,t)----->0,1
      Attack's power:
      攻击者具有 选择明文攻击的能力，攻击者可以选择q个m块发送给challenger，挑战者会返回特定的tag给攻击者
   
       攻击者的目标是：能够产生一个新的合法的明文/tag 对
   
   
   MAC是基于PRF
      Secure PRF =》Secure MAC
          for a pRF: F:k x X -> Y define a MAC I_F=(S,V) as:
          - S(k,m) :=F(k,m)
          - V(k,m,t): output 'yes' if t=F(k,m) and 'no' otherwise
   怎么定义一个安全的MAC
   Thm: If F:K x X-->Y is a secure PRF and 1/|Y| is negligible.  
      |Y| is large the I_F is a secure MAc
      
        ADV_MAC[A,I_f]<=Adv_PRF[B,F] +1/|Y|
        
    =>I_f is secure as long as |Y| is large, say |Y|=2^80
    
                       m1
              <   -------------
     chal         --------------->                        ADV
                      t1
          <--------------------------------
                 (m,t)
                 
                 
  MAin question:
      how to convert Small-MAC into a Big-MAC
  
  Two main constructions used in practice:
     -CBC-MAC bank industry --ANSI x9.9 ,FIPS 186-3
     -NMAC                     SSL 
                 
 
 
 CBC-MAC 
 
 recall: secure PRF F => secure MAC. as long as |Y| is large 
           S(k,m) = F(k,m)
   our goal:        
 given a PRF for short message(AES)
 
 construct a PRF for long messages,使得（一个大数据）能够通过一个MAC算法产生tag
 
   
     From here on let X={0,1}^n  (e.g. n=128)   
       m[0]         m[1]           m[2] 
        |     ___xor_|     ____xor_|                  raw CBC is not a secure mac unless addding the final step
        |    |       |     |       |
      F(k,)--      F(k,)---      F(k,) -------
                                              |
                                          F(k1,)-->tag 只有加了这个步骤CBCmac 才是一个安全的mac算法
                                          
                                         
         把一个非常长的message转换成非常多的块，我们能把任意长度的message作为输入，message的长度小于block的个数
   
   Why the last encryption step in ECBC-MAC
      suppose we define a MAC I_RAW=(s,V),where 
           S(k,m)= rawCBC(k,m)
              The I_RAW is easily broken by a 1-chosen mas attack
              
      poor attack can't forge the tag because of he can't know the key k
      but if a smart attacker works as follow:
         1. choose an arbitrary one-block messge m属于X
         2.request tag for m Get t=F(k,m)
         3.output t as MAC forgery for the 2-block message
         
        RawCBC(k,(m,t xor m))= F(k,F(k,m) xor (t xor m)) =F(k,t xor (t xor m))=F(k,m)
     
        所以message m 和 message block（m, m xor t）所产生的两个tag是相等的，
             攻击者可以伪造一个相同的tag对于不相同的来个message
        
        
      
      
      
      
      
   
   
         
                
   NMAC(nested mac) 嵌套的mac
   
   m[0]   m[1]   m[2].....so on and so forth
    |       |      |
    |       |      |                         cascade is not secure，因为只要攻击者对NMAC做了一次选择明文攻击，那么
k---F-------F------F--t->t||fpad                攻击者就能仿造出一个伪mac,因为F不需要一个保密的密钥k，来进行加密仅仅是把输入作为密钥
                           |             cascade--->cascade(k,m)---->cascade(k,m||w) for any w
                           |
                       k1->F     cascade加了k1 才会是安全的
                           |
                          tag
                          
                          
                 
    ECBC-MAC and NMAC analysis         

Theorem: For any L>0
            For every eff. q-query PRF adv.A attacking F_ECBC or F NMAc
            there exists an eff. adversary B s.t.:
            
            Adv_PRF[A,F_ECBC]<=Adv_PRP[B,F] + 2q^2/|x|
            Adv_PRF[A,F_NMAC]<=q*Adv_PRF[B,F] +q^2/2|k|
            
            q可以映射成在实际上生活中，用同一个k加密的次数，
            当q远小于根号下x的时候，CBC-MAC是安全的
            只要当q远小于根号下k的时候，NMAC也是安全的，在基于AES-128的情况下，k=2^64
            
 所以当issue 根号x下的ECBC-mac和根号k下的NMAC signing之后，MAC将变得不安全
   cute attack:
       1.after issuing |Y|根号下的质询之后，对于一个随机message x，或者一个（mi，ti）
       2.find 一个t_u=t_v的碰撞，在u不等于v的情况下
       3.choose 一个w 生成一个对于（u||W）的tag，又对V选择一个W生成一个tag，那么tag（w||v）=tag(w||u)
       我们就找到对于两个不同的message存在相同的两个tag。
            
            
      ECBE-MAC和 NMAC的比较
         ECBE-MAC 普遍是基于AES，
          *  CCM encryption mode 
          *  Nist standard called CMAC
          
       NMAC not ussally used with AES or 3DES
          Main reason: need to change AES key on every block requires re-computing AES-key 
            
            
       但是NMAC普遍应用与HMAC中，
       
       the construdtion of HMAC
       
       however,what to do when the message lenght is not a multiple of block size.
       
       by using the mac-padding
       
       bad idea: pad m with 0, but the adversary can easily break the mechanism。
                                  m     000
                                  m||0   00   会存在两个不相等的message 的tag可能是相等的
                                  
       CBC mac padding
         For security,padding must be invertible!
              m0 != m1==> padding(m0) != padding(m1)
        ISO: padding 1000.。。，最后再加上一个dummy block ，来保证padding function是不可逆的
        
        Cmac -nist
          使用 （k,k1,k2）来分别对最后的一步进行 有效的 PRF
         F(k,*)
            
m0        m1......mw100                     m0        m1......mw
 |         |       |                         |         |       |
 |     __ xor    _ xor---k1                  |     __ xor    _ xor---k2
F(k,)  |   |     | |                        F(k,)  |   |     | |
 |_____|   |     |F(k,)                      |_____|   |     |F(k,) 
         F(k,)   | |                                   F(k,)   | |
           |_____| tag                                  |_____| tag

k1和k2 是k通过一个PRG所产生的，如果message需要一个padding那么,就选择k1对消息进行异或
 
                            如果message不需要一个padding那么,就选择k2对消息进行异或
          

---------------------------------------------------------------------------------------------------------

  但是 ECBC-MAC和 NMAC都是sequence 按照顺序来的mac，不能够同时并行处理 message block的操作
  construction 3: paraller MAC
  
     m[0]    m[1]    m[2]......m[t]
      |       |       |         |
     xor     xor     xor       xor
      |       |       |         |
   p[k,0]   p[k,1]  p[k,2].....p[k,t]  密钥K包括(k,k1),最后的padding是类似与CMAC
      |       |       |         |
   F(k1,)    F(k1,)  F(k1,).....|
      |_ __ __|_______|_________|
             xor
              |
           F(k1,)-->tag
           
           如果我们标志 序号 的p去掉的话，攻击者如果交换两个message block 的顺序的时候，最后的tag将不会发生改变。
           
   PMAV  
         ADV[A,F_pmac]<=ADV_PRF[B,F]+2*q^2*L^2/|x|,只有当 ql << x^1/2,Pmac才是安全的。
         
         PMAC能够快速的改变 tag 当，其中的 message block 发生改变的时候。for example.当m0变成m0‘的时候
          如何快速的改变tag
          我们首先假设 F 是一个可逆的PRP
            F^(-1)(k1,tag) xor F(k1, m[0] xor P[k1]) xor F(k1, m[0'] xor P[k1])
            
         one-time MAC is like to one-time pad that no adversary can break the mechainsm and faster than  PRE-based  MACs
         
         当一次MAC 变成 many times mac的时候，
          有一个efficient 方法 
              Carter-Wegman MAC: CW((k1,k2),m) = (r,F(k1,r) xor S(k2,m)),F是slow 但是short input
                                                                         S是fast 但是long inp
                                 RUN V(k2,m,F(k1, r) xor t) 
                                 tag生成过程和 tag验证过程
             Thm: if (S,v) is a secure one-time Mac and F a secure PRF then CW is a secure 
              MAC outputting atags in {0,1}^2n
         
        
           
           
  
  
  
  
  
  
  
      




                 
                 
